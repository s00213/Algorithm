namespace _06_1._Heap
{
    internal class Program
    {
        // 2. 힙정렬 기술면접 준비
        // (힙, 추가, 삭제, 완전이진트리 배열 표현)

        // 힙이란?
        // 우선순위 큐를 위하여 만들어진 자료구조
        // 부모 노드가 항상 자식노드보다 우선순위가 높은 속성을 만족하는 트리기반의 자료구조
        // 많은 자료 중 우선순위가 가장 높은 요소를 빠르게 가져오기 위해 사용
        // 이진 트리 : 부모가 2개의 자녀를 가짐 
        // 완전 이진 트리의 일종임 -> 배열을 이용하여 힙을 구현함
        // 비선형 자료
        // 왼쪽 자식 : index* 2 + 1
        // 오른쪽 자식 : index* 2 + 2
        // 부모 주소 : (index -1 ) / 2 -> 소수점은 버림
        // 새로운 자식이 생겼을 떄는 일단 가장 뒤에 놓음
        // 힙상태가 깨졌다면, 우선순위를 비교해서 승격시키고 완료된 상태를 보면 힙상태가 됨
        // -> 승격과정이 어렵다고 하더라도, 전체 자료를 확인하는 것이 아니고 해당 데이터만 승격만 시키면 됨
        // -> 반절만 비교하면 됨(이분법적임)
        // -> 속도적인 우위가 확보됨
        // 가장 우선순위 자리를 삭제했다면, 가장 아래있던 자료를 부모자리로 올림
        // -> 올린 자료와 자식 자료 2개를 비교 후 우선순위대로 자리를 내림
        // -> 계속 자리를 내리다보면 힙상태가 됨
        // * 시간복잡도 *
        // 탐색(가장 우선순위가 높은)  추가       삭제
        // 0(1)                      0(logN)    0(logN)
        // -> 굉장히 시간이 빠름

        static void Main(string[] args)
        {            
        }
    }
}
        // 0. 응급실 만들기 (골든타임을 입력받아서)
        // 급한 환자부터 치료하는 응급실
        // 0. 중간값 구하기
        // (ex. 숫자가 10,000개 숫자 중 정렬시켰을 떄
        // 중간에 있는 값찾기 == 5,000번 째 큰 수 찾기)