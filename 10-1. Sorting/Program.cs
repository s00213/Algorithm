namespace _10_1._Sorting
{
    // 1. 선형정렬 3종 구현 원리, 원리에 의한 특징 조사

    // -1. 선택 정렬(Selection Sort)
    // 먼저 리스트에서 가장 작거나 큰 항목을 찾아 첫 번째 항목과 위치를 바꿈
    // * 과정 *
    // 1.  리스트 중 가장 작은 항목을 찾아서 정렬한다.
    // 2.  반복
    // * 원리에 의한 특징 *
    // : 각 정렬마다 한 인덱스 씩 앞으로 정렬시키기 때문에, 한 정렬마다 n개의 항목을 탐색하며, 정렬을 n-1번 만큼 반복해야 함
    // -> 시간복잡도 : O(n^2)

    // -2. 삽입 정렬(Insertion Sort)
    // 배열 맨 처름 정렬된 부분에, 정렬되지 않은 다음 항목을 삽입하는 방식
    // 데이터 크기가 작고 리스트가 이미 정렬되어 있으면 병합 정렬이나 퀵 정렬 같은 고급 알고리즘보다 성능이 더 좋음
    // -> 미리 정렬된 리스트에 새 항목을 추가할 떄 쓰면 좋음
    // * 과정 *
    // 1. n 번째 정렬 때는 n+1 번째 인덱스 항목부터 첫 번째 항목까지 검색하며 바로 옆 항목과 비교하여 더 작은 수 (또는 큰 수)를 왼쪽으로 보내줌
    // 2. 반복
    // * 원리에 의한 특징 *
    // : 각 정렬마다 한 인덱스 씩 앞으로 정렬시키기 때문에, 한 정렬마다 최대 n개의 항목을 탐색
    // : 정렬을 최대 n번 만큼 반복해야 하므로, 평균과 최악의 시간 복잡도 : O(n^2)
    // -> 시간복잡도 : O(n)

    // -3. 버블 정렬(Bubble Sort)
    // : 인접한 두 항목을 비교하여 정렬하는 방식 
    // * 과정 *
    // 1. 리스트의 인덱스 0부터, 해당 항목과 다음 항목을 비교하며 큰 수가 오른쪽으로 가도록 재설정
    // 2. 반복
    // * 원리에 의한 특징 *
    // : 각 정렬마다 각 인덱스를 정렬시키기 떄문에, 한 정렬마다 n-1번의 정렬을 하며, 정렬을 n-1번 만큼 반복해야 힘
    // -> 시간 복잡도 : O(n^2)


    // 2. 분할정복정렬 3종 구현 원리, 원리에 의한 특징 조사

    // -1. 힙
    // 힙을 이용하여 우선순위가 가장 높은 요소부터 가져와 정렬
    // 불안정 정렬
    // * 구현
    // 1. 최대 힙에서 힙 특성에 위반되는 원소의 값을 내려보냄으로 최대 힙 특성 유지
    // 2. 최대 힙을 만듦, 리프 노드보다 한 단계 위의 노드부터 루트 노드까지 올라감

    // -2. 병합
    // 데이터를 2분할하여 정렬 후 합병
    // 특징 상 큰 데이터를 2분할 시 2분할 된 데이터를 저장할 공간이 필요함
    // -> 다른 정렬과 다르게 메모리에 부담이 되는 정렬임
    // 안정 정렬
    // 최선 시간복잡도 : O(nlogn)
    // 평균 시간복잡도 : O(nlogn)
    // 최악 시간복잡도 : O(nlogn)
    // 메모리 : n
    // * 구현
    // 1. 정렬할 n개 원소의 배열을 n/2 개씩 부분 수열 두 개로 분할
    // 2. 합병 정렬을 이용하여 두 부분 배열을 재귀적으로 정렬
    // 3. 정렬된 두 개의 부분 배열을 병합하여 정렬된 배열 하나로 만듦

    // -3. 퀵
    // : 분할정복을 이용한 정렬 방법 중 피벗(pivot)과 파티션(partition)을 이용해 분할한 뒤 정렬하는 방법
    // : 실제 사용빈도가 높은 알고리즘 중 하나로 버블, 삽입, 선택정렬보다 효율적임
    // * 구현
    // 1. 배열 A[p, ..., r]을 두 부분 배열 A[p, ..., q-1]과 A[q+1, ..., r]로 분할
    // 2. 퀵 정렬을 재귀호출해서 A[p, ..., q-1]과 A[q+1, ..., r]두 부분배열로 정렬
    // 3. 결합 : 부분 배열이 이미 정렬되어있으므로 합치는 작업 필요하지 않음

    // 3. 분할정복정렬 3종의 원리에 의한 특징 조사
    //    (힙정렬 특징, 병합정렬 특징, 퀵정렬 특징)
    // : 2 번에 같이 조사함
    //--------------------------------------
    // 0. 정렬 구현 시도
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}